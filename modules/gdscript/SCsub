#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_gdscript = env_modules.Clone()

thirdparty_obj = []
thirdparty_dir = "#thirdparty/asmjit/"
thirdparty_sources = [
    "src/asmjit/core/archtraits.cpp",
    "src/asmjit/core/assembler.cpp",
    "src/asmjit/core/builder.cpp",
    "src/asmjit/core/codeholder.cpp",
    "src/asmjit/core/codewriter.cpp",
    "src/asmjit/core/compiler.cpp",
    "src/asmjit/core/constpool.cpp",
    "src/asmjit/core/cpuinfo.cpp",
    "src/asmjit/core/emithelper.cpp",
    "src/asmjit/core/emitter.cpp",
    "src/asmjit/core/emitterutils.cpp",
    "src/asmjit/core/environment.cpp",
    "src/asmjit/core/errorhandler.cpp",
    "src/asmjit/core/formatter.cpp",
    "src/asmjit/core/func.cpp",
    "src/asmjit/core/funcargscontext.cpp",
    "src/asmjit/core/globals.cpp",
    "src/asmjit/core/inst.cpp",
    "src/asmjit/core/instdb.cpp",
    "src/asmjit/core/jitallocator.cpp",
    "src/asmjit/core/jitruntime.cpp",
    "src/asmjit/core/logger.cpp",
    "src/asmjit/core/operand.cpp",
    "src/asmjit/core/osutils.cpp",
    "src/asmjit/core/ralocal.cpp",
    "src/asmjit/core/rapass.cpp",
    "src/asmjit/core/rastack.cpp",
    "src/asmjit/core/string.cpp",
    "src/asmjit/core/support.cpp",
    "src/asmjit/core/target.cpp",
    "src/asmjit/core/type.cpp",
    "src/asmjit/core/virtmem.cpp",
    "src/asmjit/core/zone.cpp",
    "src/asmjit/core/zonehash.cpp",
    "src/asmjit/core/zonelist.cpp",
    "src/asmjit/core/zonestack.cpp",
    "src/asmjit/core/zonetree.cpp",
    "src/asmjit/core/zonevector.cpp",
    "src/asmjit/x86/x86assembler.cpp",
    "src/asmjit/x86/x86builder.cpp",
    "src/asmjit/x86/x86compiler.cpp",
    "src/asmjit/x86/x86emithelper.cpp",
    "src/asmjit/x86/x86formatter.cpp",
    "src/asmjit/x86/x86func.cpp",
    "src/asmjit/x86/x86instapi.cpp",
    "src/asmjit/x86/x86instdb.cpp",
    "src/asmjit/x86/x86operand.cpp",
    "src/asmjit/x86/x86rapass.cpp",
]

thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_gdscript.Prepend(CPPPATH=[thirdparty_dir + "src"])
env_gdscript.Append(CPPDEFINES=["ASMJIT_STATIC", "ASMJIT_NO_DEPRECATED"])
env_gdscript.Prepend(CPPEXTPATH=[thirdparty_dir, thirdparty_dir + "src"])

env_thirdparty = env_gdscript.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)

env_gdscript.add_source_files(env.modules_sources, "*.cpp")
env_gdscript.Append(CPPDEFINES=["GDSCRIPT_JIT_ENABLED"])

env.modules_sources += thirdparty_obj

if env.editor_build:
    env_gdscript.add_source_files(env.modules_sources, "./editor/*.cpp")

    SConscript("editor/script_templates/SCsub")

    # Those two modules are required for the language server protocol
    if env["module_jsonrpc_enabled"] and env["module_websocket_enabled"]:
        env_gdscript.add_source_files(env.modules_sources, "./language_server/*.cpp")
    else:
        # Using a define in the disabled case, to avoid having an extra define
        # in regular builds where all modules are enabled.
        env_gdscript.Append(CPPDEFINES=["GDSCRIPT_NO_LSP"])
        # Also needed in main env to unexpose --lsp-port option.
        env.Append(CPPDEFINES=["GDSCRIPT_NO_LSP"])


if env["tests"]:
    env_gdscript.Append(CPPDEFINES=["TESTS_ENABLED"])
    env_gdscript.add_source_files(env.modules_sources, "./tests/*.cpp")
